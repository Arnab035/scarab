# .github/workflows/compile-pr.yml
name: Compile PR in Container

on:
  pull_request:
    branches: [main]  # Or your target branch

jobs:
  get_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_sha.outputs.tag }}
    steps:
      - name: Get latest SHA from scarab-infra
        id: get_sha
        run: |
          LATEST_SHA=$(curl -s https://api.github.com/repos/litz-lab/scarab-infra/commits/main | jq -r '.sha')
          SHORT_SHA=$(echo "$LATEST_SHA" | cut -c1-7)
          echo "tag=$SHORT_SHA" >> $GITHUB_OUTPUT

  build-opt:
    runs-on: ubuntu-latest
    needs: get_tag
    container:
      image: ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ needs.get_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mark Git repo as safe
        run: git config --global --add safe.directory /__w/scarab_ll/scarab_ll

      - name: Build Scarab Opt
        working-directory: src
        run: make opt -j

  run-scarab:
    runs-on: ubuntu-latest
    needs: [get_tag]
    steps:
      - name: Copy simpoint traces
        run: |
          curl -L -o traces_top_simpoint.tar.gz https://github.com/litz-lab/scarab-infra/releases/download/top_simpoint_perlbench/traces_top_simpoint.tar.gz
          tar -xzf traces_top_simpoint.tar.gz
          pwd

      - name: Clone scarab-infra repo via SSH
        run: git clone https://github.com/litz-lab/scarab-infra.git

      - name: Checkout scarab PR code
        uses: actions/checkout@v4
        with:
          path: scarab_ll

      - name: Pull Scarab Docker image
        working-directory: scarab-infra
        run: |
          docker pull ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ needs.get_tag.outputs.tag }}
          docker tag ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ needs.get_tag.outputs.tag }} allbench_traces:${{ needs.get_tag.outputs.tag }}

      - name: Run Scarab simulation
        working-directory: scarab-infra
        run: |
          set -e #force workflow to fail on script error
          chmod +x run.sh
          pip install -r requirements.txt
          ls -alt /home/runner/work/scarab_ll/scarab_ll/
          ./run.sh --simulation top_simpoint

      # â”€â”€ Extract metrics from sim.log â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Extract PR KIPS
        id: extract-sim
        working-directory: simulations
        run: |
          SIM_KIPS=$(grep -oP '\(\K[0-9]+(?=\.[0-9]+\s*KIPS\))' ./github_top_simpoint_workflow/this_pr/500.perlbench_r/29229/sim.log | head -n1)
          SIM_IPC=$(grep -oP '--\s+\K[0-9.]+(?=\s+IPC)'          ./github_top_simpoint_workflow/this_pr/500.perlbench_r/29229/sim.log | head -n1)
          echo "kips=$SIM_KIPS" >> "$GITHUB_OUTPUT"

      - name: Extract PR cumulative IPC
        id: extract-ipc
        working-directory: simulations
        run: |
          ipc=$(grep "Cumulative:" ./github_top_simpoint_workflow/this_pr/500.perlbench_r/29229/core.stat.0.out | sed -n 's/.*IPC: \([0-9.]*\).*/\1/p')
          echo "ipc=${ipc:-ERROR}" >> $GITHUB_OUTPUT

      # â”€â”€ Check out baseline repo with reference results â”€â”€â”€â”€â”€â”€
      - name: Checkout baseline performance repo
        uses: actions/checkout@v4
        with:
          repository: litz-lab/scarab_perf
          path: baseline
          # If the repo is private, add:
          # ssh-key: ${{ secrets.SCARAB_PERF_SSH_KEY }}

      # â”€â”€ Extract baseline metrics â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Extract baseline KIPS & IPC
        id: extract-base
        run: |
          last=$(tail -n1 baseline/scarab_perf.log | tr -d '\r')   # githash,ipc,KIPS
          IFS=',' read -r _ BASE_IPC BASE_KIPS <<< "$last"
          echo "kips=$BASE_KIPS" >> "$GITHUB_OUTPUT"
          echo "ipc=$BASE_IPC"   >> "$GITHUB_OUTPUT"

      # â”€â”€ Compute speedâ€‘ups and post PR comment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // â”€â”€ pull numbers from previous steps â”€â”€
            const simKips  = parseFloat("${{ steps.extract-sim.outputs.kips }}");
            const simIpc   = parseFloat("${{ steps.extract-ipc.outputs.ipc }}");
            const baseKips = parseFloat("${{ steps.extract-base.outputs.kips }}");
            const baseIpc  = parseFloat("${{ steps.extract-base.outputs.ipc }}");

            // â”€â”€ helper to colour numbers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            function coloured(value, fasterIsBetter = true) {
              const better = fasterIsBetter ? value >= 1 : value <= 1;
              const colour = better ? 'green' : 'red';
              const txt    = value.toFixed(2) + 'Ã—';
              return `<span style="color:${colour}; font-weight:bold">${txt}</span>`;
            }

            const body = `
              ðŸ“Š **Scarab Simulation Result**

              | Metric | PR run | Baseline | Î” |
              | ------ | -----: | -------: | :-- |
              | **KIPS** | \`${simKips}\` | \`${baseKips}\` | ${coloured(simKips / baseKips)} |
              | **IPC**  | \`${simIpc}\`  | \`${baseIpc}\`  | ${coloured(simIpc  / baseIpc )} |
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
            
      - name: Write metrics line
        run: |
          echo "${{ github.event.pull_request.head.sha }},\
          ${{ steps.metrics.outputs.ipc }},\
          ${{ steps.metrics.outputs.kips }}" > metrics_line.txt

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: perf-line-${{ github.event.pull_request.head.sha }}
          path: metrics_line.txt
          if-no-files-found: error

  build-dbg:
    runs-on: ubuntu-latest
    needs: get_tag
    if: github.event_name == 'pull_request'
    container:
      image: ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ needs.get_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mark Git repo as safe
        run: git config --global --add safe.directory /__w/scarab_ll/scarab_ll

      - name: Build Scarab Dbg
        working-directory: src
        run: make dbg -j

