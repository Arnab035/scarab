name: Clang Format Check

permissions:
  contents: write

on:
  push:
    branches:
      - pr-clang-format
      # - "**"  # Run for all branches pushed by lab members
  pull_request:
    branches:
      - "**"  # Run for all branches pushed by lab members
      #- pr-clang-format  # Only run for the pr-clang-format branch

  workflow_dispatch: # Allows manual trigger

jobs:
  clang-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Get changed files
        id: changed-files
        run: |
          set -x  # Enable debug mode to print each command
          git remote -v  # Verify the remote URL

          if [ "$GITHUB_ACTIONS" != "true" ]; then
            #if the flow is tested locally with act ensure to have a valid GITHUB_TOKEN in .secrets
            git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/Litz-Lab/scarab_ll.git
          else
            git remote set-url origin https://github.com/Litz-Lab/scarab_ll.git
          fi
          git fetch origin main  # Fetch the main branch
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E '\.(cc|h|c)$')
          #CHANGED_FILES=$(timeout 30s git diff --name-only origin/main...HEAD | grep -E '\.(cpp|h|c)$')
          echo "Changed files: $CHANGED_FILES"
          echo "::set-output name=files::$CHANGED_FILES"

      # Step 4: Apply clang-format to changed files
      - name: Apply clang-format
        if: steps.changed-files.outputs.files != ''
        run: |
          echo "${{ steps.changed-files.outputs.files }}" | xargs -n 1 clang-format -style=file -i

      # Step 5: Commit and push changes
      - name: Commit and push changes
        if: steps.changed-files.outputs.files != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ steps.changed-files.outputs.files }}
          git commit -m "Apply clang-format fixes"
          git push

      # Optional: Comment on the PR if issues are found
      - name: Post a comment on the PR
        if: steps.changed-files.outputs.files != ''
        uses: actions/github-script@v6
        with:
          script: |
            const { github, context } = require('@actions/github');
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: "clang-format found issues in the code. Fixed."
            });
